{"version":3,"sources":["actions.js","components/ConversionActions.jsx","App.js","serviceWorker.js","reducer.js","index.js"],"names":["types","UPPER_CASE","LOWER_CASE","CAPITALIZE","CAMEL_CASE","UPPER_UNDERSCORE","SET_CONVERSION_TYPE","SET_OUTPUT","convert","conversionType","text","_","upperCase","lowerCase","capitalize","camelCase","replace","setOutput","type","setConversionType","CONVERSION_TYPES","ConversionActions","this","props","output","input","_this","react_default","a","createElement","map","key","className","onClick","handleButton","React","Component","connect","state","dispatch","bindActionCreators","makeTitle","App","title","event","target","value","setState","_this2","htmlFor","autoFocus","id","placeholder","onChange","e","handleInput","components_ConversionActions","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","storeObj","createStore","store","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.675480ab.chunk.js","sourcesContent":["import _ from 'lodash';\r\n\r\nconst types = {\r\n    UPPER_CASE: 'UPPER_CASE',\r\n    LOWER_CASE: 'LOWER_CASE',\r\n    CAPITALIZE: 'CAPITALIZE',\r\n    CAMEL_CASE: 'CAMEL_CASE',\r\n    UPPER_UNDERSCORE: 'UPPER_UNDERSCORE',\r\n    // ACTION\r\n    SET_CONVERSION_TYPE: 'SET_CONVERSION_TYPE',\r\n    SET_OUTPUT: 'SET_OUTPUT'\r\n}\r\n\r\nexport default types;\r\n\r\n\r\n// helper functions\r\nexport function convert(conversionType, text) {\r\n    switch(conversionType){\r\n        case types.UPPER_CASE:\r\n            return _.upperCase(text);\r\n        case types.LOWER_CASE:\r\n            return _.lowerCase(text);\r\n        case types.CAPITALIZE:\r\n            return _.capitalize(text);\r\n        case types.CAMEL_CASE:\r\n            return _.camelCase(text);\r\n        case types.UPPER_UNDERSCORE:\r\n            return _.upperCase(text).replace(/ /g, \"_\");\r\n        default:\r\n            return text;\r\n    }\r\n}\r\n\r\nexport function setOutput(text) {\r\n    return { \r\n        type: types.SET_OUTPUT,\r\n        text\r\n    };\r\n}\r\n\r\nexport function setConversionType(text){\r\n    return {\r\n        type: types.SET_CONVERSION_TYPE,\r\n        text\r\n    };\r\n}\r\n","import React from 'react';\r\nimport types from '../actions';\r\n\r\n// Redux\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setConversionType, setOutput, convert } from '../actions';\r\n\r\n// UI\r\nconst CONVERSION_TYPES = [\r\n    types.UPPER_CASE,\r\n    types.LOWER_CASE,\r\n    types.CAPITALIZE,\r\n    types.CAMEL_CASE,\r\n    types.UPPER_UNDERSCORE\r\n]\r\n\r\nclass ConversionActions extends React.Component {\r\n\r\n    handleButton(text) {\r\n        this.props.setConversionType(text);\r\n        const output = convert(text, this.props.input);\r\n        this.props.setOutput(output);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                {CONVERSION_TYPES.map((conversionType) => (\r\n                    <button\r\n                        key={conversionType}\r\n                        className=\"btn btn-dark mr-2\"\r\n                        onClick={() => this.handleButton(conversionType)}>\r\n                        {convert(conversionType, conversionType) }\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    conversionType: state.conversionType\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => (\r\n    bindActionCreators({ setConversionType , setOutput }, dispatch)\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversionActions);","import React from 'react';\nimport './App.css';\nimport ConversionActions from './components/ConversionActions';\n// Style\nimport 'bootstrap/dist/css/bootstrap.css';\n// Redux\nimport { convert, setOutput } from './actions';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nfunction makeTitle(conversionType){\n  return  _.capitalize((_.lowerCase(conversionType)));\n}\n\nclass App extends React.Component {\n\n  state = {\n    input: \"\",\n    output: \"\",\n    title: makeTitle(this.props.conversionType)\n  }\n\n  handleInput(event) {\n    const input = event.target.value;\n    this.setState({ input });\n    const output = convert(this.props.conversionType, input);\n    this.props.setOutput(output);\n    this.setState({ \n      title: makeTitle(this.props.conversionType)\n     });\n  }\n\n  render() {\n    const { output } = this.props;\n    return (\n      <div className=\"container\">\n        <h1>Text Tools: {this.state.title}</h1>\n        <div className=\"text-muted\">Case conversion tools for naming</div>\n        <div className=\"mb-4\"></div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"InputText\">Input</label>\n          <input\n            autoFocus\n            type=\"text\"\n            className=\"form-control\"\n            id=\"InputText\"\n            placeholder=\"Input\"\n            value={this.state.input}\n            onChange={(e) => this.handleInput(e)}\n          />\n        </div>\n        <hr />\n\n        <ConversionActions input={this.state.input} />\n\n        <hr />\n        <div className=\"form-group\">\n          <label htmlFor=\"OutputText\">Output</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"OutputText\"\n            placeholder=\"Output\"\n            value={output} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  conversionType: state.conversionType,\n  output: state.output\n})\n\nconst mapDispatchToProps = (dispatch) => (\n  bindActionCreators({ convert, setOutput }, dispatch)\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from './actions';\r\n\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nfunction output(state = \"\", action) {\r\n    if (action.type === types.SET_OUTPUT) {\r\n        return action.text;\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction conversionType(state = types.UPPER_CASE, action){\r\n    if (action.type === types.SET_CONVERSION_TYPE) {\r\n        return action.text;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default combineReducers({\r\n    output,\r\n    conversionType\r\n});\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './reducer.js'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst storeObj = process.env.NODE_ENV === 'production' ?  \n    createStore(store) : \n    createStore(store, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={storeObj}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n    );\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}